package de.muenchen.animad.admin.administration.service.services.businessactions;

import org.springframework.stereotype.Service;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import java.util.Arrays;
import java.util.UUID;
import java.math.BigDecimal;
import java.text.ParseException;
import de.muenchen.animad.admin.administration.service.gen.services.businessactions.TestDatenBusinessActionService;
import de.muenchen.animad.admin.administration.service.gen.domain.Animals_;
import de.muenchen.animad.admin.administration.service.gen.domain.Gender_;
import de.muenchen.animad.admin.administration.service.gen.domain.Features_;
import de.muenchen.animad.admin.administration.service.gen.domain.Enclosure_;
import de.muenchen.animad.admin.administration.service.rest.Enclosure_Repository;
import de.muenchen.animad.admin.administration.service.gen.domain.Animal_;
import de.muenchen.animad.admin.administration.service.rest.Animal_Repository;
import de.muenchen.animad.admin.administration.service.gen.domain.Keeper_;
import de.muenchen.animad.admin.administration.service.rest.Keeper_Repository;
import java.util.List;

//import de.muenchen.service.security.UserInfo;

/**
 * Provides a service to execute business-actions.
 * If used as generated by GAIA this service will be autowired and called by BusinessActionController.
 */
@Service
public class TestDatenBusinessActionServiceImpl implements TestDatenBusinessActionService {
	// If you need access to the database you can autowire a Repository.
	// Repositories are generated into the package: .gen.rest
	//
	// @Autowired
	// <EntityName>Repository repo;
	@Autowired
	Enclosure_Repository enclosureRepo;
	@Autowired
	Animal_Repository animalRepo;
	@Autowired
	Keeper_Repository keeperRepo;

	public void testdatenErzeugen(){
		
            /** BISHER
		//insert example data for Enclosure_
		Enclosure_ enclosure = new Enclosure_();
		enclosure.setName("A123");
		enclosure.setCleaningTime(java.time.LocalTime.parse("15:15:15",java.time.format.DateTimeFormatter.ofPattern("k:mm:ss")));
		enclosure.setOid(UUID.randomUUID());
		
		//insert example data for Animal_
		Animal_ animal = new Animal_();
		animal.setName("Paul");
		animal.setSpecies(Animals_.Elephant);
		animal.setBirthday(java.time.LocalDate.parse("01.01.1990",java.time.format.DateTimeFormatter.ofPattern("dd.MM.yyyy")));
		animal.setGender(Gender_.male);
		animal.setWeight(new BigDecimal("600.0"));
		animal.setAlive(true);
		animal.setOid(UUID.randomUUID());
		
		//insert example data for Keeper_
		Keeper_ keeper = new Keeper_();
		keeper.setFirstName("Hans");
		keeper.setLastName("Dampf");
		keeper.setEmploymentDate(java.time.LocalDate.parse("01.01.2012",java.time.format.DateTimeFormatter.ofPattern("dd.MM.yyyy")));
		keeper.setSkill(new java.util.ArrayList<>(Arrays.asList(Features_.cleaning)));
		keeper.setBirthday(java.time.LocalDate.parse("01.01.1990",java.time.format.DateTimeFormatter.ofPattern("dd.MM.yyyy")));
		keeper.setSalary(1500L);
		keeper.setOid(UUID.randomUUID());
		
		// Set relations
		enclosure.setAnimalList(new java.util.ArrayList<>(Arrays.asList(animal)));
		animal.setKeeperList(new java.util.ArrayList<>(Arrays.asList(keeper)));
		
		//Save all example Entities in an order that won't cause errors
		keeperRepo.save(keeper);
		animalRepo.save(animal);
		enclosureRepo.save(enclosure);
            **/
            
            //NEU
            
        System.out.println("############ Create Test Data ##############");

        //insert example data for Enclosures
        Enclosure_ enclosure = new Enclosure_();
        enclosure.setName("Elephant's Paradise");
        enclosure.setCleaningTime(java.time.LocalTime.parse("15:15:15", java.time.format.DateTimeFormatter.ofPattern("k:mm:ss")));
        enclosure.setOid(UUID.randomUUID());

        //insert example data for Zookeepers
        Keeper_ keeper = new Keeper_();
        keeper.setFirstName("Hans");
        keeper.setLastName("van der Damme");
        keeper.setEmploymentDate(java.time.LocalDate.parse("01.01.2017", java.time.format.DateTimeFormatter.ofPattern("dd.MM.yyyy")));
        keeper.setSkill(new java.util.ArrayList<>(Arrays.asList(Features_.cleaning, Features_.feeding)));
        keeper.setBirthday(java.time.LocalDate.parse("04.08.1974", java.time.format.DateTimeFormatter.ofPattern("dd.MM.yyyy")));
        keeper.setSalary(450L);
//        keeper.setOid(UUID.randomUUID());
        keeperRepo.save(keeper);

        // insert example data for Animals
        // Benjamin
        Animal_ animal1 = new Animal_();
        animal1.setName("Benjamin");
        animal1.setSpecies(Animals_.Elephant);
        animal1.setBirthday(java.time.LocalDate.parse("01.01.1967", java.time.format.DateTimeFormatter.ofPattern("dd.MM.yyyy")));
        animal1.setGender(Gender_.male);
        animal1.setWeight(new BigDecimal("2450.0"));
        animal1.setAlive(true);
//        animal1.setOid(UUID.randomUUID());

        // Dumbo
        Animal_ animal2 = new Animal_();
        animal2.setName("Dumbo");
        animal2.setSpecies(Animals_.Elephant);
        animal2.setBirthday(java.time.LocalDate.parse("01.01.1998", java.time.format.DateTimeFormatter.ofPattern("dd.MM.yyyy")));
        animal2.setGender(Gender_.male);
        animal2.setWeight(new BigDecimal("1350.0"));
        animal2.setAlive(true);
//        animal2.setOid(UUID.randomUUID());
        
        List<Animal_> animals = new java.util.ArrayList<Animal_>(Arrays.asList(animal1, animal2));
        
        // Set relations
        animal1.setKeeperList(new java.util.ArrayList<>(Arrays.asList(keeper)));
        animal2.setKeeperList(new java.util.ArrayList<>(Arrays.asList(keeper)));

        animalRepo.save(animal1);
        animalRepo.save(animal2);

        enclosure.setAnimalList(animals);
        //Save all example Entities in an order that won't cause errors
        enclosureRepo.save(enclosure);

        Keeper_ keeper1 = new Keeper_();
        keeper1.setFirstName("Hans");
        keeper1.setLastName("Bla");
        keeper1.setEmploymentDate(java.time.LocalDate.parse("01.01.2017", java.time.format.DateTimeFormatter.ofPattern("dd.MM.yyyy")));
        keeper1.setSkill(new java.util.ArrayList<>(Arrays.asList(Features_.cleaning)));
        keeper1.setBirthday(java.time.LocalDate.parse("04.08.1974", java.time.format.DateTimeFormatter.ofPattern("dd.MM.yyyy")));
        keeper1.setSalary(1250L);
        keeper1.setOid(UUID.randomUUID());
	keeperRepo.save(keeper1);

        Keeper_ keeper2 = new Keeper_();
        keeper2.setFirstName("Hans");
        keeper2.setLastName("Cro");
        keeper2.setEmploymentDate(java.time.LocalDate.parse("01.01.2017", java.time.format.DateTimeFormatter.ofPattern("dd.MM.yyyy")));
        keeper2.setSkill(new java.util.ArrayList<>(Arrays.asList(Features_.cleaning)));
        keeper2.setBirthday(java.time.LocalDate.parse("04.08.1974", java.time.format.DateTimeFormatter.ofPattern("dd.MM.yyyy")));
        keeper2.setSalary(550L);
        keeper2.setOid(UUID.randomUUID());
	keeperRepo.save(keeper2);

        Keeper_ keeper3 = new Keeper_();
        keeper3.setFirstName("Anna Lena");
        keeper3.setLastName("Dom");
        keeper3.setEmploymentDate(java.time.LocalDate.parse("01.01.2017", java.time.format.DateTimeFormatter.ofPattern("dd.MM.yyyy")));
        keeper3.setSkill(new java.util.ArrayList<>(Arrays.asList(Features_.cleaning)));
        keeper3.setBirthday(java.time.LocalDate.parse("04.08.1974", java.time.format.DateTimeFormatter.ofPattern("dd.MM.yyyy")));
        keeper3.setSalary(1750L);
        keeper3.setOid(UUID.randomUUID());
	keeperRepo.save(keeper3);

        Keeper_ keeper4 = new Keeper_();
        keeper4.setFirstName("Eleni");
        keeper4.setLastName("Ess");
        keeper4.setEmploymentDate(java.time.LocalDate.parse("01.01.2017", java.time.format.DateTimeFormatter.ofPattern("dd.MM.yyyy")));
        keeper4.setSkill(new java.util.ArrayList<>(Arrays.asList(Features_.cleaning)));
        keeper4.setBirthday(java.time.LocalDate.parse("04.08.1974", java.time.format.DateTimeFormatter.ofPattern("dd.MM.yyyy")));
        keeper4.setSalary(1200L);
        keeper4.setOid(UUID.randomUUID());
	keeperRepo.save(keeper4);

        Keeper_ keeper5 = new Keeper_();
        keeper5.setFirstName("Frauke");
        keeper5.setLastName("Fur");
        keeper5.setEmploymentDate(java.time.LocalDate.parse("01.01.2017", java.time.format.DateTimeFormatter.ofPattern("dd.MM.yyyy")));
        keeper5.setSkill(new java.util.ArrayList<>(Arrays.asList(Features_.cleaning)));
        keeper5.setBirthday(java.time.LocalDate.parse("04.08.1974", java.time.format.DateTimeFormatter.ofPattern("dd.MM.yyyy")));
        keeper5.setSalary(2450L);
        keeper5.setOid(UUID.randomUUID());
	keeperRepo.save(keeper5);

        Keeper_ keeper6 = new Keeper_();
        keeper6.setFirstName("Gerda");
        keeper6.setLastName("Gla");
        keeper6.setEmploymentDate(java.time.LocalDate.parse("01.01.2017", java.time.format.DateTimeFormatter.ofPattern("dd.MM.yyyy")));
        keeper6.setSkill(new java.util.ArrayList<>(Arrays.asList(Features_.cleaning)));
        keeper6.setBirthday(java.time.LocalDate.parse("04.08.1974", java.time.format.DateTimeFormatter.ofPattern("dd.MM.yyyy")));
        keeper6.setSalary(750L);
        keeper6.setOid(UUID.randomUUID());
	keeperRepo.save(keeper6);

        Keeper_ keeper7 = new Keeper_();
        keeper7.setFirstName("Ilona");
        keeper7.setLastName("Ill");
        keeper7.setEmploymentDate(java.time.LocalDate.parse("01.01.2017", java.time.format.DateTimeFormatter.ofPattern("dd.MM.yyyy")));
        keeper7.setSkill(new java.util.ArrayList<>(Arrays.asList(Features_.cleaning)));
        keeper7.setBirthday(java.time.LocalDate.parse("04.08.1974", java.time.format.DateTimeFormatter.ofPattern("dd.MM.yyyy")));
        keeper7.setSalary(1250L);
        keeper7.setOid(UUID.randomUUID());
	keeperRepo.save(keeper7);

        Keeper_ keeper8 = new Keeper_();
        keeper8.setFirstName("Karla");
        keeper8.setLastName("Kas");
        keeper8.setEmploymentDate(java.time.LocalDate.parse("01.01.2017", java.time.format.DateTimeFormatter.ofPattern("dd.MM.yyyy")));
        keeper8.setSkill(new java.util.ArrayList<>(Arrays.asList(Features_.cleaning)));
        keeper8.setBirthday(java.time.LocalDate.parse("04.08.1974", java.time.format.DateTimeFormatter.ofPattern("dd.MM.yyyy")));
        keeper8.setSalary(950L);
        keeper8.setOid(UUID.randomUUID());
	keeperRepo.save(keeper8);

        Keeper_ keeper9 = new Keeper_();
        keeper9.setFirstName("Laura");
        keeper9.setLastName("Lob");
        keeper9.setEmploymentDate(java.time.LocalDate.parse("01.01.2017", java.time.format.DateTimeFormatter.ofPattern("dd.MM.yyyy")));
        keeper9.setSkill(new java.util.ArrayList<>(Arrays.asList(Features_.cleaning)));
        keeper9.setBirthday(java.time.LocalDate.parse("04.08.1974", java.time.format.DateTimeFormatter.ofPattern("dd.MM.yyyy")));
        keeper9.setSalary(2450L);
        keeper9.setOid(UUID.randomUUID());
	keeperRepo.save(keeper9);

        Keeper_ keeper10 = new Keeper_();
        keeper10.setFirstName("Micha");
        keeper10.setLastName("Mus");
        keeper10.setEmploymentDate(java.time.LocalDate.parse("01.01.2017", java.time.format.DateTimeFormatter.ofPattern("dd.MM.yyyy")));
        keeper10.setSkill(new java.util.ArrayList<>(Arrays.asList(Features_.cleaning)));
        keeper10.setBirthday(java.time.LocalDate.parse("04.08.1974", java.time.format.DateTimeFormatter.ofPattern("dd.MM.yyyy")));
        keeper10.setSalary(1450L);
        keeper10.setOid(UUID.randomUUID());
	keeperRepo.save(keeper10);
    }

}
