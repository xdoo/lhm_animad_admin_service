package de.muenchen.animad.admin.administration.service.services.businessactions;

import org.springframework.stereotype.Service;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import java.util.Arrays;
import java.util.UUID;
import java.math.BigDecimal;
import java.text.ParseException;
import de.muenchen.animad.admin.administration.service.gen.services.businessactions.TestDatenBusinessActionService;
import de.muenchen.animad.admin.administration.service.gen.domain.Animals_;
import de.muenchen.animad.admin.administration.service.gen.domain.Gender_;
import de.muenchen.animad.admin.administration.service.gen.domain.Features_;
import de.muenchen.animad.admin.administration.service.gen.domain.Enclosure_;
import de.muenchen.animad.admin.administration.service.rest.Enclosure_Repository;
import de.muenchen.animad.admin.administration.service.gen.domain.Animal_;
import de.muenchen.animad.admin.administration.service.rest.Animal_Repository;
import de.muenchen.animad.admin.administration.service.gen.domain.Keeper_;
import de.muenchen.animad.admin.administration.service.rest.Keeper_Repository;

//import de.muenchen.service.security.UserInfo;

/**
 * Provides a service to execute business-actions.
 * If used as generated by GAIA this service will be autowired and called by BusinessActionController.
 */
@Service
public class TestDatenBusinessActionServiceImpl implements TestDatenBusinessActionService {
	// If you need access to the database you can autowire a Repository.
	// Repositories are generated into the package: .gen.rest
	//
	// @Autowired
	// <EntityName>Repository repo;
	@Autowired
	Enclosure_Repository enclosureRepo;
	@Autowired
	Animal_Repository animalRepo;
	@Autowired
	Keeper_Repository keeperRepo;

	public void testdatenErzeugen(){
		
		//insert example data for Enclosure_
		Enclosure_ enclosure = new Enclosure_();
		enclosure.setName("A123");
		enclosure.setCleaningTime(java.time.LocalTime.parse("15:15:15",java.time.format.DateTimeFormatter.ofPattern("k:mm:ss")));
		enclosure.setOid(UUID.randomUUID());
		
		//insert example data for Animal_
		Animal_ animal = new Animal_();
		animal.setName("Paul");
		animal.setSpecies(Animals_.Elephant);
		animal.setBirthday(java.time.LocalDate.parse("01.01.1990",java.time.format.DateTimeFormatter.ofPattern("dd.MM.yyyy")));
		animal.setGender(Gender_.male);
		animal.setWeight(new BigDecimal("600.0"));
		animal.setAlive(true);
		animal.setOid(UUID.randomUUID());
		
		//insert example data for Keeper_
		Keeper_ keeper = new Keeper_();
		keeper.setFirstName("Hans");
		keeper.setLastName("Dampf");
		keeper.setEmploymentDate(java.time.LocalDate.parse("01.01.2012",java.time.format.DateTimeFormatter.ofPattern("dd.MM.yyyy")));
		keeper.setSkill(new java.util.ArrayList<>(Arrays.asList(Features_.cleaning)));
		keeper.setBirthday(java.time.LocalDate.parse("01.01.1990",java.time.format.DateTimeFormatter.ofPattern("dd.MM.yyyy")));
		keeper.setSalary(1500L);
		keeper.setOid(UUID.randomUUID());
		
		// Set relations
		enclosure.setAnimalList(new java.util.ArrayList<>(Arrays.asList(animal)));
		animal.setKeeperList(new java.util.ArrayList<>(Arrays.asList(keeper)));
		
		//Save all example Entities in an order that won't cause errors
		keeperRepo.save(keeper);
		animalRepo.save(animal);
		enclosureRepo.save(enclosure);
		}

}
