package de.muenchen.animad.admin.administration.service.gen.domain;

import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Table;	
import javax.persistence.OneToMany;
import javax.persistence.OrderColumn;
import javax.persistence.CascadeType;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import org.hibernate.search.annotations.Indexed;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.datatype.jsr310.deser.LocalTimeDeserializer;
import com.fasterxml.jackson.datatype.jsr310.ser.LocalTimeSerializer;
import org.hibernate.search.annotations.FieldBridge;
import org.hibernate.search.annotations.Field;
import de.muenchen.service.BaseEntity;
import de.muenchen.service.PetersPerfectBridge;
import de.muenchen.auditing.MUCAudited;
import javax.persistence.FetchType;

/*
 * This file will be overwritten on every change of the model!
 * This file was automatically generated by GAIA.
 */
/**
 * This class represents a Enclosure_.
 * <p>
 * Only oid and reference will be stored in the database.
 * The entity's content will be loaded according to the reference variable.
 * </p>
 */
@Entity
@Indexed
@Table(name = "Enclosure")
public class Enclosure_ extends BaseEntity {
	
	// ========= //
	// Variables //
	// ========= //
	
	@Column(name="name")
	@Field
	@FieldBridge(impl = PetersPerfectBridge.class)
	@NotNull
	@Size(min=2, max=30)
	private String name;
	
	
	@Column(name="cleaningTime")
	@JsonDeserialize(using = LocalTimeDeserializer.class)
	@JsonSerialize(using = LocalTimeSerializer.class)
	@NotNull
	private java.time.LocalTime cleaningTime;
	
	
	@OrderColumn(name="order_index")
	@JoinTable(name = "Enclosure_AnimalList", joinColumns = { @JoinColumn(name = "enclosure_oid")}, inverseJoinColumns = {@JoinColumn(name="animalList_oid")})
	@OneToMany
	@NotNull
	@Size(min = 1)
	private java.util.List<Animal_> animalList = new java.util.ArrayList<>();
	
	
	/**
	 * Default Constructor for enclosure.
	 */
	public Enclosure_() {}
	
	// =================== //
	// Getters and Setters //
	// =================== //
	public String getName(){
		return name;
	}
	
	public void setName(String name){
		this.name = name;
	}
	
	
	public java.time.LocalTime getCleaningTime(){
		return cleaningTime;
	}
	
	public void setCleaningTime(java.time.LocalTime cleaningTime){
		this.cleaningTime = cleaningTime;
	}
	
	
	public java.util.List<Animal_> getAnimalList(){
		return animalList;
	}
	
	public void setAnimalList(java.util.List<Animal_> animalList){
		this.animalList = animalList;
	}
	
	
	@Override
	public boolean equals(Object other) {
		if (other == null)
			return false;
		if (this == other)
			return true;
		if (!(other.getClass() == Enclosure_.class))
			return false;
		if (!super.equals(other))
			return false;
		Enclosure_ enclosure = (Enclosure_) other;
		if (getName() != null ? !getName().equals(enclosure.getName()) : enclosure.getName() != null)
			return false;
		if (getCleaningTime() != enclosure.getCleaningTime())
			return false;
		if (getAnimalList() != null ? !getAnimalList().equals(enclosure.getAnimalList()) : enclosure.getAnimalList() != null)
			return false;
		return true;
	}

	@Override
	public int hashCode() {
		int result = super.hashCode();
		result = 31 * result + (getName() != null ? getName().hashCode() : 0);
		result = 31 * result + (getCleaningTime() != null ? getCleaningTime().hashCode() : 0);
		result = 31 * result + (getAnimalList() != null ? getAnimalList().hashCode() : 0);
		return result;
	}

	/**
	 * Returns a String representation for this enclosure.
	 * The form is:
	 * <EntityName>
	 * <attribute1_Type> <attribute1_name>: <attribute1_value>
	 * <attribute2_Type> <attribute2_name>: <attribute2_value>
	 * ...
	 */
	@Override
	public String toString(){
		String s = "enclosure";
		s += "\nString name: " + getName();
		s += "\njava.time.LocalTime cleaningTime: " + getCleaningTime();
		s += "\njava.util.List<Animal_> animalList: " + getAnimalList();
		return s;
	}
}
