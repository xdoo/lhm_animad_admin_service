package de.muenchen.animad.admin.administration.service.gen.domain;

import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Table;	
import java.math.BigDecimal;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.ManyToMany;
import javax.persistence.OrderColumn;
import javax.persistence.CascadeType;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import org.hibernate.search.annotations.Indexed;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.datatype.jsr310.deser.LocalDateDeserializer;
import com.fasterxml.jackson.datatype.jsr310.ser.LocalDateSerializer;
import org.hibernate.search.annotations.FieldBridge;
import org.hibernate.search.annotations.Field;
import de.muenchen.service.BaseEntity;
import de.muenchen.service.PetersPerfectBridge;
import de.muenchen.vaadin.demo.apilib.domain.Past;
import de.muenchen.auditing.MUCAudited;
import javax.persistence.FetchType;

/*
 * This file will be overwritten on every change of the model!
 * This file was automatically generated by GAIA.
 */
/**
 * This class represents a Animal_.
 * <p>
 * Only oid and reference will be stored in the database.
 * The entity's content will be loaded according to the reference variable.
 * </p>
 */
@Entity
@Indexed
@Table(name = "Animal")
public class Animal_ extends BaseEntity {
	
	// ========= //
	// Variables //
	// ========= //
	
	@Column(name="name")
	@Field
	@FieldBridge(impl = PetersPerfectBridge.class)
	@NotNull
	@Size(min=2, max=30)
	private String name;
	
	
	@Column(name="species")
	@Field
	@FieldBridge(impl = PetersPerfectBridge.class)
	@Enumerated(EnumType.STRING)
	@NotNull
	private Animals_ species;
	
	
	@Column(name="birthday")
	@JsonDeserialize(using = LocalDateDeserializer.class)
	@JsonSerialize(using = LocalDateSerializer.class)
	@NotNull
	@Past
	private java.time.LocalDate birthday;
	
	
	@Column(name="gender")
	@Enumerated(EnumType.STRING)
	@NotNull
	private Gender_ gender;
	
	
	@Column(name="weight")
	@NotNull
	private BigDecimal weight;
	
	
	@OrderColumn(name="order_index")
	@JoinTable(name = "Animal_KeeperList", joinColumns = { @JoinColumn(name = "animal_oid")}, inverseJoinColumns = {@JoinColumn(name="keeperList_oid")})
	@ManyToMany(cascade = {CascadeType.MERGE}, fetch = FetchType.EAGER)
	@NotNull
	@Size(min = 1)
	private java.util.List<Keeper_> keeperList = new java.util.ArrayList<>();
	
	
	@Column(name="alive")
	@NotNull
	private boolean alive;
	
	
	/**
	 * Default Constructor for animal.
	 */
	public Animal_() {}
	
	// =================== //
	// Getters and Setters //
	// =================== //
	public String getName(){
		return name;
	}
	
	public void setName(String name){
		this.name = name;
	}
	
	
	public Animals_ getSpecies(){
		return species;
	}
	
	public void setSpecies(Animals_ species){
		this.species = species;
	}
	
	
	public java.time.LocalDate getBirthday(){
		return birthday;
	}
	
	public void setBirthday(java.time.LocalDate birthday){
		this.birthday = birthday;
	}
	
	
	public Gender_ getGender(){
		return gender;
	}
	
	public void setGender(Gender_ gender){
		this.gender = gender;
	}
	
	
	public BigDecimal getWeight(){
		return weight;
	}
	
	public void setWeight(BigDecimal weight){
		this.weight = weight;
	}
	
	
	public java.util.List<Keeper_> getKeeperList(){
		return keeperList;
	}
	
	public void setKeeperList(java.util.List<Keeper_> keeperList){
		this.keeperList = keeperList;
	}
	
	
	public boolean isAlive(){
		return alive;
	}
	
	public void setAlive(boolean alive){
		this.alive = alive;
	}
	
	
	@Override
	public boolean equals(Object other) {
		if (other == null)
			return false;
		if (this == other)
			return true;
		if (!(other.getClass() == Animal_.class))
			return false;
		if (!super.equals(other))
			return false;
		Animal_ animal = (Animal_) other;
		if (getName() != null ? !getName().equals(animal.getName()) : animal.getName() != null)
			return false;
		if (getSpecies() != animal.getSpecies())
			return false;
		if (getBirthday() != animal.getBirthday())
			return false;
		if (getGender() != animal.getGender())
			return false;
		if (getWeight() != animal.getWeight())
			return false;
		if (getKeeperList() != null ? !getKeeperList().equals(animal.getKeeperList()) : animal.getKeeperList() != null)
			return false;
		if (isAlive() != animal.isAlive())
			return false;
		return true;
	}

	@Override
	public int hashCode() {
		int result = super.hashCode();
		result = 31 * result + (getName() != null ? getName().hashCode() : 0);
		result = 31 * result + (getSpecies() != null ? getSpecies().hashCode() : 0);
		result = 31 * result + (getBirthday() != null ? getBirthday().hashCode() : 0);
		result = 31 * result + (getGender() != null ? getGender().hashCode() : 0);
		result = 31 * result + (getWeight() != null ? getWeight().hashCode() : 0);
		result = 31 * result + (getKeeperList() != null ? getKeeperList().hashCode() : 0);
		result = 31 * result + (isAlive() ? 1 : 0);
		return result;
	}

	/**
	 * Returns a String representation for this animal.
	 * The form is:
	 * <EntityName>
	 * <attribute1_Type> <attribute1_name>: <attribute1_value>
	 * <attribute2_Type> <attribute2_name>: <attribute2_value>
	 * ...
	 */
	@Override
	public String toString(){
		String s = "animal";
		s += "\nString name: " + getName();
		s += "\nAnimals_ species: " + getSpecies();
		s += "\njava.time.LocalDate birthday: " + getBirthday();
		s += "\nGender_ gender: " + getGender();
		s += "\nBigDecimal weight: " + getWeight();
		s += "\njava.util.List<Keeper_> keeperList: " + getKeeperList();
		s += "\nboolean alive: " + isAlive();
		return s;
	}
}
